{"version":3,"file":"posts.service.js","sourceRoot":"","sources":["../../../../../Users/hnadotti/Documents/Projects/BlogWithAngular2/tmp/broccoli_type_script_compiler-input_base_path-UEtcAAFD.tmp/0/src/app/posts.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/Rx';\nimport { Post } from './post';\n\n@Injectable()\n\nexport class PostService {\n    private _baseUrl = 'http://localhost:3000';\n    private extractData(res: Response) {\n        let body = res.json();\n        return body.data || { };\n    }\n    public posts:Post[];\n\n    constructor(private _http: Http, private _router:Router ) { };\n    private headers = new Headers({'Content-Type': 'application/json'});\n\n    getPosts() {\n        var posts = [];\n        return this._http.get(this._baseUrl+'/posts')\n            .map((response: Response) => <Post[]> response.json())\n            .catch(this.handleError)\n    }\n\n    getPost(id: any): Observable<Post> {\n        return this.getPosts()\n            .map((posts: Post[]) => posts.find(post => post._id === id));\n    }\n\n    savePost(post:Post):Observable<Post> {\n        let body = JSON.stringify(post);\n        let options = new RequestOptions({ headers: this.headers });\n        return this._http.post(this._baseUrl+'/addpost', body, options)\n            .map(this.extractData, this.getPosts)\n            .catch(this.handleError);\n            \n    }\n\n    deletePost(id:any):Observable<Post> {\n        let options = new RequestOptions({ headers: this.headers });\n        return this._http.delete(this._baseUrl+'/deletepost/'+id,  options)\n             .map(()=> console.log('Registro Borrado'))\n             .catch(this.handleError);             \n    }\n\n    goTo(url:string):void{\n        this._router.navigate(['/'+url])\n    }\n\n    private handleError(error: Response) {\n        // in a real world app, we may send the server to some remote logging infrastructure\n        // instead of just logging it to the console\n        console.error(error);\n        return Observable.throw(error.json().error || 'Server error');\n    }\n}\n"]}