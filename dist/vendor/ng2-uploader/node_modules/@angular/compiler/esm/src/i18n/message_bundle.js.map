{"version":3,"file":"message_bundle.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/i18n/message_bundle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HtmlParser} from '../html_parser/html_parser';\nimport {InterpolationConfig} from '../html_parser/interpolation_config';\nimport {ParseError} from '../parse_util';\n\nimport * as i18n from './i18n_ast';\nimport {extractI18nMessages} from './i18n_parser';\nimport {Serializer} from './serializers/serializer';\n\n\n/**\n * A container for message extracted from the templates.\n */\nexport class MessageBundle {\n  private _messageMap: {[id: string]: i18n.Message} = {};\n\n  constructor(\n      private _htmlParser: HtmlParser, private _implicitTags: string[],\n      private _implicitAttrs: {[k: string]: string[]}) {}\n\n  updateFromTemplate(html: string, url: string, interpolationConfig: InterpolationConfig):\n      ParseError[] {\n    const htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);\n\n    if (htmlParserResult.errors.length) {\n      return htmlParserResult.errors;\n    }\n\n    const messages = extractI18nMessages(\n        htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n\n    messages.forEach((message) => {\n      const id = strHash(serializeAst(message.nodes).join('') + `[${message.meaning}]`);\n      this._messageMap[id] = message;\n    });\n  }\n\n  write(serializer: Serializer): string { return serializer.write(this._messageMap); }\n}\n\n/**\n * String hash function similar to java.lang.String.hashCode().\n * The hash code for a string is computed as\n * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n * where s[i] is the ith character of the string and n is the length of\n * the string. We mod the result to make it between 0 (inclusive) and 2^32 (exclusive).\n *\n * Based on goog.string.hashCode from the Google Closure library\n * https://github.com/google/closure-library/\n *\n * @internal\n */\n// TODO(vicb): better algo (less collisions) ?\nexport function strHash(str: string): string {\n  let result: number = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Normalize to 4 byte range, 0 ... 2^32.\n    result = (31 * result + str.charCodeAt(i)) >>> 0;\n  }\n  return result.toString(16);\n}\n\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * @internal\n */\nclass _SerializerVisitor implements i18n.Visitor {\n  visitText(text: i18n.Text, context: any): any { return text.value; }\n\n  visitContainer(container: i18n.Container, context: any): any {\n    return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n  }\n\n  visitIcu(icu: i18n.Icu, context: any): any {\n    let strCases = Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context: any): any {\n    return ph.isVoid ?\n        `<ph tag name=\"${ph.startName}\"/>` :\n        `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context: any): any {\n    return `<ph name=\"${ph.name}\">${ph.value}</ph>`;\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n  }\n}\n\nconst serializerVisitor = new _SerializerVisitor();\n\nexport function serializeAst(ast: i18n.Node[]): string[] {\n  return ast.map(a => a.visit(serializerVisitor, null));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}